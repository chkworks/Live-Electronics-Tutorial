#N canvas 429 56 961 749 12;
#X declare -path else;
#X obj 527 305 rpole~;
#X obj 527 332 rzero~ 1;
#X obj 559 144 hip~;
#X obj 584 100 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 1928.78 256;
#X obj 477 74 noise~;
#X obj 587 73 hsl 128 15 20 20000 1 1 empty empty empty -2 -8 0 10
-228856 -1 -1 8400 1;
#X text 145 130 y[n] = x[n] - a[n] * x[n-1];
#X obj 202 642 clip 0 1;
#X floatatom 202 548 5 0 0 0 - - -;
#X floatatom 202 670 5 0 0 0 - - -;
#X text 176 547 Hz;
#X obj 720 474 v a;
#X obj 674 230 send \$0-a;
#X obj 566 278 receive \$0-a;
#X obj 720 450 receive \$0-a;
#X obj 185 399 fexpr~ $x - $x[-1] + a * $y[-1];
#X text 117 464 y[n] = x[n] - x[n-1] + a * y[n-1];
#X obj 705 318 cnv 15 150 50 empty empty empty 5 12 0 14 -261234 -66577
0;
#X text 752 328 _____________;
#X text 706 334 H(z) =;
#X text 757 345 1 - a * z^-1;
#X text 765 322 1 - z^-1;
#X text 51 42 The [hip~] object is a 1 Pole / 1 Zero filter. It can
then be implemented with the [rpole~] object plus the [rzero~] \, which
is a one zero filter whose difference equation and [fexpr~] implementation
is:, f 47;
#X obj 95 226 rzero~;
#X text 79 438 Difference equation:;
#X obj 477 489 out~;
#X obj 527 373 out~;
#X obj 202 582 hz2rad;
#X obj 202 612 expr 1 - $f1;
#X text 50 514 The pole coefficient is now given as:;
#X obj 559 190 out~;
#X obj 674 200 clip 0 1;
#X obj 674 146 hz2rad;
#X obj 674 173 expr 1 - $f1;
#X obj 477 453 fexpr~ $x - $x[-1] + a*$y1[-1];
#X text 465 22 Compare below the [hip~] object to other equivalent
implementations., f 34;
#N canvas 762 140 455 370 H(z) 0;
#X text 106 109 Y(z) = X(z) - X(z)z^-1 + a * Y(z)z^-1;
#X text 113 134 X(z) - X(z)z^-1 = Y(z) - a * Y(z)z^-1;
#X text 114 154 X(z) (1 - z^-1) = Y(z) - a * Y(z)z^-1;
#X text 114 176 X(z) = Y(z) - a * Y(z)z^-1 / (1 - z^-1);
#X text 87 205 H(z) = Y(z) * (1 - z^-1) / Y(z) - a * Y(z)z^-1;
#X text 173 267 _____________;
#X text 132 270 H(z) =;
#X text 179 284 1 - a * z^-1;
#X text 186 261 1 - z^-1;
#X text 33 43 From: y[n] = x[n] - x[n-1] + a * y[n-1];
#X text 35 78 We get:;
#X restore 802 369 pd H(z);
#X obj 773 45 declare -path else;
#X text 711 294 Transfer function:;
#X obj 401 633 biquad~;
#X obj 401 677 out~;
#X obj 449 599 pack f 0 1 -1 0;
#X obj 449 571 receive \$0-a;
#X obj 187 228 fexpr~ $x1 - $x2*$x1[-1];
#X text 51 170 The [rzero~] object corresponds to the [fexpr~] below:
, f 47;
#X text 157 227 =;
#X text 162 309 y[n] = x[n] - x[n-1];
#X text 41 269 The zero coefficient for [hip~] is always 1 \, so we
can simplify the equation as:, f 49;
#X text 46 342 Let's join it to the one pole equation (y[n] = x[n]
+ a * y[n-1]) and get a single equation for this filter:, f 38;
#X text 581 571 We can also use [biquad~]. The gain coefficient is
always 1 and note that the zero coefficient is also 1 but now it is
negative - because in [biquad~] we are summing the zero coefficients
and not subtracting it as in [rzero~]., f 47;
#X text 76 670 pole coefficient;
#X connect 0 0 1 0;
#X connect 1 0 26 0;
#X connect 2 0 30 0;
#X connect 3 0 2 1;
#X connect 3 0 32 0;
#X connect 4 0 0 0;
#X connect 4 0 2 0;
#X connect 4 0 34 0;
#X connect 4 0 39 0;
#X connect 5 0 3 0;
#X connect 7 0 9 0;
#X connect 8 0 27 0;
#X connect 13 0 0 1;
#X connect 14 0 11 0;
#X connect 27 0 28 0;
#X connect 28 0 7 0;
#X connect 31 0 12 0;
#X connect 32 0 33 0;
#X connect 33 0 31 0;
#X connect 34 0 25 0;
#X connect 39 0 40 0;
#X connect 41 0 39 0;
#X connect 42 0 41 0;
