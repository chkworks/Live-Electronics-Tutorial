#N canvas 565 23 992 763 12;
#X floatatom 258 274 0 0 0 0 - - - 0;
#X floatatom 261 181 0 0 0 0 - - - 0;
#X obj 258 247 receive midinote;
#X obj 517 53 hsl 128 15 0 1 0 0 slider empty empty -2 -8 0 10 #dcdcdc
#000000 #000000 0 1;
#X obj 517 84 hsl 128 15 0 1 0 0 empty slider empty -2 -8 0 10 #fcc4c4
#000000 #000000 0 1;
#X obj 256 304 receive slider;
#X floatatom 256 330 5 0 0 0 - - - 0;
#X text 507 31 built-in send/receive;
#X msg 333 528 dsp 1;
#X msg 349 559 dsp 0;
#X msg 478 537 \; pd dsp \$1;
#X obj 478 510 tgl 18 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000 0 1;
#X text 502 509 On/Off;
#N canvas 0 22 450 278 (subpatch) 0;
#X array array4 100 float 2;
#X coords 0 1 100 -1 200 140 1 0 0;
#X restore 687 196 graph;
#X msg 514 114 const \$1;
#X text 377 528 DSP On;
#X text 393 558 DSP Off;
#X text 425 195 There are also audio object versions \, but besides
[send~]/[receive~] and we also have [throw~]/[catch~]. Check their
help files., f 28;
#X obj 261 208 send midinote;
#X msg 792 98 \; array4 const 0.5;
#X text 55 277 Semicolons will always \; break lines \, this also \;
happens on objects and \; comments!;
#X text 583 113 <==========;
#X text 667 84 send a constant value to all elements =======>, f 18
;
#X text 27 447 Additionaly \, you can set receive and send names in
GUI objects with messages., f 34;
#X msg 124 495 receive slider;
#X text 707 15 Arrays can also receive commands from a [send] object
that has the array's name as the address., f 33;
#X obj 124 587 nbx 5 14 -1e+37 1e+37 0 0 empty midinote empty 0 -8
0 10 #fcfcfc #000000 #000000 0 256;
#X msg 141 533 receive midinote;
#X obj 474 657 r slider;
#X msg 474 686 \$1 10;
#X obj 474 715 line~;
#X obj 397 651 osc~ 440;
#X obj 397 685 *~;
#X obj 397 729 dac~;
#X msg 37 195 \; slider 0.05 \; midinote 56;
#X msg 143 195 \; slider 0.1 \; midinote 77;
#X text 35 26 A [send] and [receive] with the same address argument
allow cordless connections. They communicate anywhere in a patch and
also to other patches!, f 61;
#X obj 461 380 s;
#X obj 501 380 r;
#X obj 545 380 s~;
#X obj 594 380 r~;
#X text 637 373 (note that [send] without an argument has a second
inlet for you to set the send name), f 43;
#X text 32 380 Abbreviations of [send] \, [receive] \, [send~] and
[receive~]:;
#X obj 333 601 s pd;
#X obj 514 143 send array4;
#X text 35 75 A semicolon in messages behaves as a [send] object \,
which is useful to send things to several places at one click. Native
atom boxes and GUI objects in Pd also have built in send and receive
functionalities (some external GUIs also have this feature). You can
set them by going into the properties window under “Messages”.
, f 61;
#X text 72 661 Turn the DSP on \, so we can get values from the gray
slider above and use it to control the volume of an oscillator by converting
it to a signal with [line~] object, f 43;
#X text 661 441 Now we'll combine \, for didactic purposes \, commas
and semicolons \, just so it's clear what happens., f 41;
#X msg 669 501 1st message \, second \; test 1 2 3 \, testing \; midinote
66;
#X obj 840 517 r test;
#X obj 669 560 print message-box;
#X obj 840 550 print test-message;
#X text 616 606 Before the semicolon \, the message(s) go out to the
outlet first (above we have two messages split by a comma). Once you
have a semicocolon \, the message can only behave as a send \, and
you can only change to a new send address with a new semicolon - so
no more output to the outlet. A comma here splits the messages to the
address defined by the symbol after the semicolon. Hence \, we get
'1 2 3' and 'testing' in [r test]!, f 50;
#X obj 454 284 send~ x;
#X obj 518 284 receive~ x;
#X obj 456 316 throw~ y;
#X obj 527 315 catch~ y;
#X obj 466 582 r pd-dsp-started;
#X obj 466 607 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc
#000000 #000000;
#X text 294 423 You can also send messages to Pd \, like the “dsp
1” and “dsp 0” messages that \, respectively \, turn the DSP
engine on and off. You can also receive messages from Pd \, such as
a bag when you turn the DSP on with 'pd-dsp-started'., f 48;
#X connect 1 0 18 0;
#X connect 2 0 0 0;
#X connect 4 0 14 0;
#X connect 5 0 6 0;
#X connect 8 0 43 0;
#X connect 9 0 43 0;
#X connect 11 0 10 0;
#X connect 14 0 44 0;
#X connect 24 0 26 0;
#X connect 27 0 26 0;
#X connect 28 0 29 0;
#X connect 29 0 30 0;
#X connect 30 0 32 1;
#X connect 31 0 32 0;
#X connect 32 0 33 0;
#X connect 32 0 33 1;
#X connect 48 0 50 0;
#X connect 49 0 51 0;
#X connect 57 0 58 0;
