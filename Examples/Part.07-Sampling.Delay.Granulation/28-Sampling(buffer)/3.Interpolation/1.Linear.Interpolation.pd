#N canvas 374 105 892 509 12;
#X declare -path else;
#X obj 137 202 hsl 200 15 0 7 0 0 empty \$0-slider empty -2 -8 0 10 #dcdcdc #000000 #000000 0 0;
#X obj 166 278 expr interpolation[i] \; interpolation[i + 1] \; $f1 - i \; int($f1);
#X obj 134 231 t b f;
#X obj 266 375 v frac;
#X obj 317 375 v i;
#X floatatom 134 455 8 0 0 0 - - value 0;
#X obj 134 427 expr a * (1 - frac) + (b * frac);
#X obj 166 375 v a;
#X obj 216 375 v b;
#X text 171 397 i;
#X text 216 397 i+1;
#X floatatom 166 348 0 0 0 0 - - - 0;
#X floatatom 216 348 0 0 0 0 - - - 0;
#X floatatom 266 348 4 0 0 0 - - - 0;
#X floatatom 317 348 0 0 0 0 - - - 0;
#X obj 564 241 cnv 15 198 198 empty \$0-lin . -13 -10 0 44 #f8f8f8 #fc0400 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array interpolation 8 float 0;
#X coords 0 1 7 -1 200 200 1 0 0;
#X restore 563 240 graph;
#N canvas 889 263 439 311 plot 0;
#X msg 151 237 label_pos \$2 \$1;
#X obj 151 211 pack;
#X obj 117 123 r value;
#X obj 117 149 * -100;
#X obj 182 131 / 7;
#X obj 182 107 r index;
#X obj 117 176 + 90;
#X obj 181 185 - 13;
#X obj 181 158 * 200;
#X obj 151 265 s \$0-lin;
#X obj 38 26 initmess \; interpolation 0 1 0 0.7 -0.3 0 -1 1 0 \, xticks 0 1 1 \, xlabel -1.1 0 1 2 3 4 5 6 7, f 52;
#X connect 0 0 9 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 3 0 6 0;
#X connect 4 0 8 0;
#X connect 5 0 4 0;
#X connect 6 0 1 0;
#X connect 7 0 1 1;
#X connect 8 0 7 0;
#X restore 710 221 pd plot;
#X obj 166 256 nbx 5 14 -1e+37 1e+37 0 0 index empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 781 438 (n = 8);
#X text 226 254 index;
#X text 263 397 fractional part;
#X text 346 374 integer index;
#X text 198 455 Linear interpolation between "a" & "b";
#X text 502 67 At least two points are needed for interpolation such as in a linear interpolation. Arrays in Pd that are drawn as polygons do visually display a linear interpolation to connect the array's points., f 53;
#X obj 731 27 declare -path else;
#X text 502 144 Let's see this example with an 8 point array. Below we calculate the linear interpolation (indicated by the red dot)., f 53;
#X text 26 19 Interpolation is needed to find values in between samples. A sound file is an array of samples \, where each index corresponds to a sample amplitude value. We need to interpolate if you have an index of 1.5 as a mid point between values 1 and 2 \, for example \, so we get a value that would correspond to it., f 63;
#X text 26 98 The [readsf~] object does not interpolate so it can only play the file at the same speed Pd is running or multiple ones (twice as fast / twice as slow \, etc). Interpolation makes it possible to play at different speeds \, such as 1.5x faster \, as it'll find such fractional mid values between samples., f 63;
#X obj 332 278 initmess \; \$0-slider 0;
#X connect 0 0 2 0;
#X connect 1 0 11 0;
#X connect 1 1 12 0;
#X connect 1 2 13 0;
#X connect 1 3 14 0;
#X connect 2 0 6 0;
#X connect 2 1 18 0;
#X connect 6 0 5 0;
#X connect 11 0 7 0;
#X connect 12 0 8 0;
#X connect 13 0 3 0;
#X connect 14 0 4 0;
#X connect 18 0 1 0;
