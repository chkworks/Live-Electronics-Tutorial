#N struct 1029-DS float x float y array 1029-table 1029-element;
#N struct 1029-element float y;
#N canvas 249 45 719 409 12;
#X obj 567 124 pointer;
#N canvas 364 366 510 351 template 0;
#X obj 152 280 plot \$0-table 900 2 0 0 20;
#X obj 53 128 struct \$0-DS float x float y array \$0-table \$0-element
;
#X text 61 46 Data Structure named "\$0-DS" holding coordinates floats
"x/y" and an array named "\$0-table" using the struct named "\$0-element"
defined in the other subpatch., f 53;
#X text 50 178 The drawing instruction for [plot] now adds more arguments.
Besides the array name we have: a color number for the line (900 \,
red) \, a line width (2) \, x/y coordinates for the location of the
array (0 \, 0) and a horizontal spacing value between the array's elements
(20).;
#X restore 120 154 pd template;
#X text 497 333 <= pointer to element;
#X obj 485 276 nbx 3 16 0 15 0 0 empty \$0-index empty 0 -8 0 12 #dcdcdc
#000000 #000000 0 256;
#X obj 376 276 nbx 4 16 -100 100 0 0 empty empty empty 0 -8 0 12 #dcdcdc
#000000 #000000 0 256;
#X text 492 252 index;
#X text 380 252 value;
#X obj 458 154 append \$0-DS x y;
#X obj 307 196 setsize \$0-DS \$0-table;
#X obj 485 309 element \$0-DS \$0-table;
#X obj 45 239 initmess \; pd-\$0-display clear \, vis 1 \; \$0-pointer
traverse pd-\$0-display \, bang \; \$0-coords 10 105 \; \$0-size 16
\; \$0-index 5;
#X obj 307 129 r \$0-size;
#X obj 458 113 r \$0-coords;
#X obj 567 94 r \$0-pointer;
#N canvas 999 177 334 221 \$0-display 1;
#X scalar 1029-DS 10 105 \; -8 \; 82 \; 8 \; 27 \; 43 \; 45 \; 41 \;
33 \; 24 \; 15 \; 5 \; -2 \; -8 \; -11 \; 85 \; 77 \; \;;
#X coords 0 221 1 220 0 0 0;
#X restore 120 177 pd \$0-display;
#N canvas 489 118 484 283 \$0-element 0;
#X obj 159 125 struct \$0-element float y;
#X text 32 28 The element is defined as a struct of name "\$0-element"
containing only a float named "y". Since this is also the special variable
name for the vertical coordinate \, this means you can drag this element
vertically \, as in Pd's arrays.;
#X text 65 171 We can also use drawing instructions for each element
in an array. Here we draw a little squared around it:, f 45;
#X obj 91 236 drawpolygon 0 2 -2 -2 2 -2 2 2 -2 2 -2 -2;
#X restore 120 131 pd \$0-element;
#X obj 376 358 set \$0-element y;
#X obj 307 156 nbx 4 16 -100 100 0 0 empty empty empty 0 -8 0 12 #dcdcdc
#000000 #000000 0 256;
#X text 59 23 The [element] object returns a pointer to an element
in an array \, so you can use it to get or set its value (with [set]/[get]).
On this patch we use [set] to set the value of a given index. Check
the [pd \$0-element] and [pd template] subpatches for new information.
, f 83;
#X text 46 359 Use [set] to set a value for a given index =>;
#X connect 0 0 7 2;
#X connect 3 0 9 0;
#X connect 4 0 16 0;
#X connect 7 0 8 1;
#X connect 7 0 9 1;
#X connect 9 0 16 1;
#X connect 11 0 17 0;
#X connect 12 0 7 0;
#X connect 13 0 0 0;
#X connect 17 0 8 0;
