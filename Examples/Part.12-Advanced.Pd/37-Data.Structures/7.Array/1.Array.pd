#N struct 1028-DS float x float y array 1028-table 1028-element;
#N struct 1028-element float y;
#N canvas 174 45 820 539 12;
#X obj 693 140 pointer;
#X obj 433 173 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
#dcdcdc #000000 #000000 0 256;
#N canvas 312 344 518 264 template 0;
#X obj 339 183 plot \$0-table;
#X text 75 169 The [plot] object is used to give drawing instructions
for arrays. It needs the array name ("\$0-table")., f 35;
#X obj 74 116 struct \$0-DS float x float y array \$0-table \$0-element
;
#X text 50 25 And now we have the Data Structure for the array. It
is named "\$0-DS" and holds the coordinates floats "x/y" and an array
named "\$0-table" using the array's element struct named "\$0-element"
defined in the other subpatch., f 58;
#X restore 164 180 pd template;
#X obj 469 429 pointer;
#X obj 469 486 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
#dcdcdc #000000 #000000 0 256;
#X text 397 248 The [getsize] object is similar to [setsize]. It needs
a struct name and an array name \, which can be given as arguments.
It sends the array size when it receives a pointer to it. Here we use
the [pointer] object to send it a pointer. We use the "traverse" message
and then ask for the "next" object \, so we get the pointer to the
first object instead of the head of the list., f 54;
#X text 83 350 When you create a subpatch \, on its properties you
have "Y units per pixel" set to "-1"., f 39;
#X text 51 326 IMPORTANT NOTE:, f 19;
#X text 39 17 This example shows how to add and set an "array". An
array is a collection of elements of the same data type \, which can
be a float \, a symbol \, a text and even an array itself., f 49;
#X obj 584 169 append \$0-DS x y;
#X obj 433 200 setsize \$0-DS \$0-table;
#X obj 469 457 getsize \$0-DS \$0-table;
#X text 442 17 When creating an array \, you also need to set its size.
We do it here with the [setsize] object. In a similar fashion \, this
object needs a struct name \, the array name and a pointer to it in
the right inlet., f 44;
#N canvas 1020 209 316 192 \$0-display 0;
#X scalar 1028-DS 25 75 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \;
0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0
\; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \;
0 \; 0 \; 3 \; 4 \; 5 \; 6 \; 7 \; 7.5 \; 8 \; 8.5 \; 9 \; 9.5 \; 10
\; 10.5 \; 11 \; 11.5 \; 12 \; 12.3333 \; 12.6667 \; 13 \; 13.3333
\; 13.6667 \; 14 \; 14.25 \; 14.5 \; 14.75 \; 15 \; 15.25 \; 15.5 \;
15.75 \; 16 \; 16.25 \; 16.5 \; 16.75 \; 17 \; 17.3333 \; 17.6667 \;
18 \; 18.3333 \; 18.6667 \; 19 \; 19.0714 \; 19.1429 \; 19.2143 \;
19.2857 \; 19.3571 \; 19.4286 \; 19.5 \; 19.5714 \; 19.6429 \; 19.7143
\; 19.7857 \; 19.8571 \; 19.9286 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20
\; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \;
20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20
\; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \; 20 \;
20 \; 19.7778 \; -5 \; -3 \; -2 \; 0 \; 1 \; 1 \; 1 \; 1.5 \; 2 \;
2.5 \; 3 \; 3.5 \; 4 \; 4.33333 \; 4.66667 \; 5 \; 5.25 \; 5.5 \; 5.75
\; 6 \; 6.25 \; 6.5 \; 6.75 \; 7 \; 7.2 \; 7.4 \; 7.6 \; 7.8 \; 8 \;
8.2 \; 8.4 \; 8.6 \; 8.8 \; 9 \; 9.4 \; 9.8 \; 10.2 \; 10.6 \; 11 \;
11.1667 \; 11.3333 \; 11.5 \; 11.6667 \; 11.8333 \; 12 \; 12.1429 \;
12.2857 \; 12.4286 \; 12.5714 \; 12.7143 \; 12.8571 \; 13 \; 13.3333
\; 13.6667 \; 14 \; 14.3333 \; 14.6667 \; 15 \; 15.1429 \; 15.2857
\; 15.4286 \; 15.5714 \; 15.7143 \; 15.8571 \; 16 \; 16.2727 \; 16.5455
\; 16.8182 \; 17.0909 \; 17.3636 \; 17.6364 \; 17.9091 \; 18.1818 \;
18.4546 \; 18.7273 \; 19 \; 19.2222 \; 19.4444 \; 19.6667 \; 19.8889
\; 20.1111 \; 20.3333 \; 20.5555 \; 20.7778 \; 21 \; 21 \; 21 \; 21
\; 21 \; 21 \; 21 \; 21 \; 21 \; 21 \; 21 \; 21 \; 21 \; 21 \; 21 \;
21 \; 21 \; 21 \; 21 \; 21 \; 21 \; 21 \; 21 \; 21 \; 20.5 \; 20 \;
19 \; 18 \; 16 \; 14 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \; 0 \;
0 \; 0 \; \;;
#X coords 0 192 1 191 0 0 0;
#X restore 275 168 pd \$0-display;
#X obj 433 139 r \$0-size;
#X obj 584 130 r \$0-coords;
#X obj 693 113 r \$0-pointer;
#X obj 469 400 message traverse pd-\$0-display \, next;
#X obj 469 379 bng 15 250 50 0 empty empty empty 17 7 0 10 #dcdcdc
#000000 #000000;
#X text 490 375 <= click;
#N canvas 325 63 560 299 \$0-element 0;
#X obj 180 147 struct \$0-element float y;
#X text 77 38 The element of an array specifies the data type the array
includes. It is here defined as a struct of name "\$0-element" containing
only a float named "y". Since 'y' is also the special variable name
for the vertical coordinate \, this means you can drag this element
vertically \, as in Pd's arrays., f 61;
#X text 83 198 Note that the struct name is the same as the subpatch
name. This is required!, f 61;
#X restore 164 154 pd \$0-element;
#X text 83 446 Check the properties for [pd \$0-display] and see that
it has been corrected (right click on it and select "properties").
, f 41;
#X text 40 83 Things now get a bit more complicated as we need a [struct]
to define the element of an array in a separate subpatch ([pd \$0-element]
here). Check the subpatches below., f 49;
#X text 83 398 This makes the array values inverted \, so you need
to change it to "1" in the properties., f 41;
#X obj 75 219 initmess \; pd-\$0-display clear \, vis 1 \; \$0-pointer
traverse pd-\$0-display \, bang \; \$0-coords 25 75 \; \$0-size 256
;
#X connect 0 0 9 2;
#X connect 1 0 10 0;
#X connect 3 0 11 0;
#X connect 9 0 10 1;
#X connect 11 0 4 0;
#X connect 14 0 1 0;
#X connect 15 0 9 0;
#X connect 16 0 0 0;
#X connect 17 0 3 0;
#X connect 18 0 17 0;
